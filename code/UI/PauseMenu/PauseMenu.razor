@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@inherits PanelComponent

<root style="opacity: @( Visible ? "1" : "0");">
	<div class="title">
		<div style="text-shadow: 4px 4px 6px black;">Fortwars</div>
	</div>

	<div class="buttons">
		<button onclick=@( () => Visible = false )> Resume </button>
		<button onclick=@( () => Game.Overlay.ShowServerList( new Sandbox.Modals.ServerListConfig( Game.Ident ) ) )> Servers </button>
		<button onclick=@( () => Game.Overlay.ShowReviewModal( Package.Fetch( Game.Ident, false )?.Result ) )> Review </button>
		<button onclick=@( () => OpenAboutMenu() )> About </button>
		<button onclick=@( () => Game.Overlay.ShowSettingsModal() )> Settings </button>
		<button onclick=@BackToMenu> Back to Menu </button>
		<button onclick=@( () => Game.Close() )> Exit </button>
	</div>
</root>

@code
{
	public bool Visible { get; set; } = false;
	[Property] public SceneFile MenuScene { get; set; }

	protected override void OnUpdate()
	{
		if ( Input.EscapePressed )
		{
			Visible = !Visible;

			//Can't convince me this is not dumb
			Input.EscapePressed = false;
		}
	}

	public void OpenAboutMenu()
	{
		if ( Panel.IsValid() && !Panel.ChildrenOfType<AboutPanel>().Any() )
		{
			Panel.AddChild( new AboutPanel() );
		}	
		else if ( Panel.IsValid() && Panel.ChildrenOfType<AboutPanel>().Any() )
		{
			Panel.ChildrenOfType<AboutPanel>()?.ToList()?.ForEach( x => x.Delete() );
		}
	}

	public void BackToMenu()
	{
		Networking.Disconnect();

		Game.ActiveScene.Load( MenuScene );
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Input.EscapePressed, Visible );
}
