@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Events;
@inherits PanelComponent
@implements IGameEventHandler<PlayerDeath>
@implements Component.INetworkListener

<root>

    <div class="output">
        @foreach (var entry in Entries)
        {
            var isDev = DevCheck.IsDev(entry.steamid);

			<div class="chat_entry">
				@if (entry.steamid > 0)
				{
					<div class="avatar" style="background-image: url( avatar:@entry.steamid )"></div>
				}
                <div class="author" style="color: @(DevCheck.IsDev(entry.steamid) ? Color.Yellow.Hex : entry.Color.Hex);">
                    @(isDev ? "[DEV] " : "")
                    @entry.author
                </div>
				<div class="message">@entry.message</div>
			</div>
		}
	</div>

	<div class="input">
		<TextEntry @ref="InputBox" onsubmit="@ChatFinished"></TextEntry>
	</div>

</root>

@code
{
	TextEntry InputBox;
	public record Entry( ulong steamid, string author, string message, RealTimeSince timeSinceAdded, Color Color );
	List<Entry> Entries = new();

	protected override void OnUpdate()
	{
		if (InputBox is null)
			return;

		Panel.AcceptsFocus = false;

		if ( Input.Pressed( "chat" ) )
		{
			InputBox.Focus();
		}

		/*if ( Entries.RemoveAll(x => x.timeSinceAdded > 20.0f) > 0 )
		{
			StateHasChanged();
		}*/

		SetClass( "open", InputBox.HasFocus );
	}

	void ChatFinished()
	{
		var text = InputBox.Text;
		InputBox.Text = "";

		if ( string.IsNullOrWhiteSpace( text ) )
			return;

		var color = HUD.GetColor();

		if ( color == "#1a1a1b" )
			color = Color.White;

		AddText(text, color);
	}

	[Rpc.Broadcast]
	public void AddText(string message, Color color)
	{
		message = message.Truncate(300);

		if ( string.IsNullOrWhiteSpace( message ) )
			return;

		var author = Rpc.Caller.DisplayName;
		var steamid = Rpc.Caller.SteamId;

		Entries.Add( new Entry( steamid, author, message, 0.0f, color ) );
		StateHasChanged();
	}

	[Rpc.Broadcast]
	public void AddSystemText( string message, string emoji )
	{
		message = message.Truncate(300);

		if ( string.IsNullOrWhiteSpace(message) )
			return;

		Entries.Add( new Entry( 0, emoji, message, 0.0f, Color.White ) );
		StateHasChanged();
	}

	void Component.INetworkListener.OnConnected(Connection channel)
	{
		if ( IsProxy )
			return;

		AddSystemText( $"{channel.DisplayName} has joined the game", "‚úîÔ∏è" );
	}

	void Component.INetworkListener.OnDisconnected(Connection channel)
	{
		if ( IsProxy )
			return;

		AddSystemText( $"{channel.DisplayName} has left the game", "‚ùå" );
	}

	void IGameEventHandler<PlayerDeath>.OnGameEvent(PlayerDeath eventArgs)
	{
		if ( IsProxy || !eventArgs.Player.IsValid() )
			return;

		if ( eventArgs.Player.Network.Owner is null )
			return;

		BroadcastPlayerDeath( eventArgs.Player, eventArgs.Attacker );
	}

	[Rpc.Broadcast]
	public void BroadcastPlayerDeath( FWPlayerController player, GameObject attacker )
	{
		if ( IsProxy || player is null )
			return;

		if ( player.Network.Owner is null )
			return;

		var name = attacker?.Network.Owner?.DisplayName;

		var attackerName = string.IsNullOrWhiteSpace( name ) ? "" : $" by {name}";

		AddSystemText( $"{player.Network.Owner?.DisplayName} was killed {attackerName}", "üíÄ" );
	}
}
