@using Sandbox;
@using Sandbox.UI;
@using System;
@attribute [StyleSheet]
@inherits Panel

@{
	var gs = GameSystem.Instance;

	var local = FWPlayerController.Local;

	if ( !gs.IsValid() || !local.IsValid() ) 
		return;

	var castedVote = local.VotedForMap;
}

<root>
	<div class="map-voting-header">
		<div style="width: 100%;">
			<div style="flex-shrink: 0;">Map Voting</div>
			<div class="close-button" onclick=@AddMiniMapVoting>close</div>
		</div>
		<div class="hr"></div>
	</div>

	<div class="inner">
		<div class="holder">
			@*Temp? Maybe we want a better way of handeling maps who support diff gamemodes*@
			@foreach ( var map in ResourceLibrary.GetAll<MapInfo>().Where( x => x.AvailableGamemodes.HasFlag( gs.CurrentGameModeType ) ))
			{
				if ( map.Hidden )
					continue;

				var votes = gs.MapVotes.ContainsKey(map) ? gs.MapVotes[map] : 0;

				var active = castedVote == map;

				<div class="map @(active ? "active" : "")" onclick=@( () => gs.AddMapVote( map, FWPlayerController.Local ) )>
					<div class="info">
						<div>@map.MapName</div>
						<div>Votes: @votes</div>
					</div>
					<div class="map-image" style="background-image: url(@map?.Thumb.ResourcePath);"></div>
				</div>
			}
		</div>
	</div>
</root>

@code
{
	public void AddMiniMapVoting()
	{
		var hud = HUD.Instance;

		if ( !hud.IsValid() )
			return;

		if ( hud.Panel?.ChildrenOfType<MiniMapVoting>().Any() ?? false )
			return;

		hud.Panel?.AddChild<MiniMapVoting>();

		Delete();
	}

	protected override int BuildHash()
	{
		var gs = GameSystem.Instance;

		if ( !gs.IsValid() ) 
			return 0;

		return gs.MapVotes.Count();
	}
}
