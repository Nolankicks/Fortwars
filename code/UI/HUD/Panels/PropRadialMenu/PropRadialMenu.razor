@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits Panel

<root class="@(Visible ? "visible" : "")">
    @{
        var i = 0;
        var count = Colors.Count;

        foreach (var (name, color) in Colors)
        {
            var rgb = color.Rgb;
            var size = (1f / count * 100f);

            <div 
                class="wheel-fraction @(SelectedColor == color ? "selected" : "")"
                style="background: conic-gradient(
                    @rgb @(MathF.Max(i * size, 0f))%, 
                    @rgb @(i * size + size)%, 
                    @rgb @(MathF.Min(i * size + size, 100f))%, 
                    transparent @(MathF.Min(i * size + size, 100f))%, 
                    transparent 100%);"
            />

            i++;
        }
    }
</root>

@code {
    private bool Visible => true;
    private Color32 Color => Colors.ElementAtOrDefault(0).Value;
    private Dictionary<string, Color32> Colors = new()
    {
        { "Red", Color32.Black },
        { "Green", Color32.White },
    };

    public Color SelectedColor { get; set; }

    public override void Tick()
    {
        if (!Visible)
            return;

        var mouse = Mouse.Position;
        var center = Screen.Size / 2f;
        var direction = mouse - center;

        var ang = (MathF.Atan2(direction.y, direction.x) * 180f / MathF.PI + 270f) % 360f;
        var size = 360f / Colors.Count;

        SelectedColor = Colors.ElementAtOrDefault((int)(ang / size)).Value;
    }

    protected override int BuildHash()
        => HashCode.Combine(Color, Visible, SelectedColor);
}
