@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits Panel

<root class="@(Visible ? "visible" : "")">
    @{
        var i = 0;
        var count = Props.Count;

        foreach (var prop in Props)
        {
            var rgb = Color.Blue.Rgb;
            var size = (1f / count * 100f);

            <div class="wheel-fraction @(SelectedProp == prop ? "selected" : "")" style="background: conic-gradient(
                        @rgb @(MathF.Max(i * size, 0f))%, 
                        @rgb @(i * size + size)%, 
                        @rgb @(MathF.Min(i * size + size, 100f))%, 
                        transparent @(MathF.Min(i * size + size, 100f))%, 
                        transparent 100%);">
            </div>

            i++;
        }
    }
</root>

@code {
	private bool Visible => true;
	private PropResource Prop => Props.ElementAtOrDefault(0);
	private List<PropResource> Props { get; set; } = new();
	public PropResource SelectedProp { get; set; }

	protected override  void OnAfterTreeRender( bool firstTime )
	{
		if ( firstTime )
		{
			Props = ResourceLibrary.GetAll<PropResource>().Where( x => !x.Hidden ).ToList();
		}
	}

	public override void Tick()
	{
		if (!Visible)
			return;

		var mouse = Mouse.Position;
		var center = Screen.Size / 2f;
		var direction = mouse - center;

		var ang = (MathF.Atan2(direction.y, direction.x) * 180f / MathF.PI + 360f) % 360f;
		var size = 360f / Props.Count;

		ang = (ang + 90f) % 360f;

		SelectedProp = Props.ElementAtOrDefault((int)(ang / size));
	}

	protected override int BuildHash()
	=> HashCode.Combine(Prop, Visible, SelectedProp);
}
