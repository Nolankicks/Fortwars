@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@using System;
@inherits Panel
@attribute [StyleSheet]

<root>
	@{
		var gs = GameSystem.Instance;

		if (!gs.IsValid())
			return;
	}

	<div class="status">@GetStateText(gs.State)</div>
	<div class="time">

		<div class="text">@FormatedTimer()</div>
	</div>
</root>

@code
{
	public string GetStateText(GameSystem.GameState gameState)
	{
		var gs = GameSystem.Instance;

		if (!gs.IsValid())
			return "Unknown";

		if (!gs.CurrentGameModeComponent.IsValid())
			return "Unknown";

		if (gs.State == GameSystem.GameState.Waiting)
		{
			return "Waiting for players";
		}
		else
		{
			return gs.CurrentGameModeComponent.CurrentRound.Name;
		}
	}

	public float TimeFraction()
	{
		var gs = GameSystem.Instance;

		if (!gs.IsValid())
			return 1;

		if (gs.State == GameSystem.GameState.Waiting)
		{
			return 1;
		}
		else
		{
			return (gs.CurrentTime - gs.StateSwitch.Relative) / gs.CurrentTime;
		}
	}

	public float GetTime()
	{
		var gs = Scene.GetAll<GameSystem>().FirstOrDefault();

		if (gs.IsValid())
		{
			if (gs.State == GameSystem.GameState.Waiting)
			{
				return gs.StateSwitch.Relative;
			}
			else
			{
				//TODO: Fix this
				var remainingTime = gs.StateSwitch - gs.CurrentTime;

				return remainingTime;
			}
		}

		return 0;
	}

	public string FormatedTimer()
	{
		return $"{TimeSpan.FromSeconds(GetTime()):mm\\:ss}";
	}

	protected override int BuildHash()
	{
		return System.HashCode.Combine(GetTime());
	}
}
