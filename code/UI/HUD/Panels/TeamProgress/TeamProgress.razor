@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@using System;
@inherits Panel
@attribute [StyleSheet]

<root>
	@{
		var gs = GameSystem.Instance;

		if (!gs.IsValid())
			return;

		var green = gs.InitGreenTimeHeld;
		var yellow = gs.InitYellowTimeHeld;
		var red = gs.InitRedTimeHeld;
		var blue = gs.InitBlueTimeHeld;

	}

	@if (gs.CurrentGameModeType == GameModeType.Classic)
	{
		<div class="team-bar blue-bar">
			<div class="bar" style="">
				<div class="fill blue" style=" border-radius: 4 0 0 4; width: @(gs.BlueTimeHeld / blue * 100)%;"></div>
			</div>
			<div class="time" style="border-radius: 0 4 4 0;">@FormatTime(gs.BlueTimeHeld)</div>
		</div>

		<div class="team-bar red-bar">
			<div class="time" style="border-radius: 4 0 0 4;">@FormatTime(gs.RedTimeHeld)</div>
			<div class="bar">
				<div class="fill red" style=" border-radius: 0 4 4 0; width: @(gs.RedTimeHeld / red * 100)%;"></div>
			</div>

		</div>

		@if (!gs.FourTeams)
			return;

		<div class="team-bar">
			<div class="bar green" style="width: @(gs.GreenTimeHeld / green * 100)%;"></div>
			<div class="time">@FormatTime(gs.GreenTimeHeld)</div>
		</div>

		<div class="team-bar">
			<div class="bar yellow" style="width: @(gs.YellowTimeHeld / yellow * 100)%;"></div>
			<div class="time">@FormatTime(gs.YellowTimeHeld)</div>
		</div>
	}
</root>

@code
{
	protected override int BuildHash()
	{
		var gs = GameSystem.Instance;

		if (!gs.IsValid())
			return 0;

		var hash = new HashCode();

		hash.Add(gs.BlueTimeHeld);
		hash.Add(gs.RedTimeHeld);
		hash.Add(gs.GreenTimeHeld);
		hash.Add(gs.YellowTimeHeld);
		hash.Add(gs.CurrentGameModeType);

		return hash.ToHashCode();
	}

	public string FormatTime(float time)
	{
		return $"{TimeSpan.FromSeconds(time):mm\\:ss}";
	}
}
