@using Sandbox;
@using Sandbox.UI;
@inherits Panel

@{
	var player = FWPlayerController.Local;

	if (!player.IsValid() || player.Inventory?.CurrentWeaponData?.Name != "Build Tool" || !ShowPanel)
	{
		return;
	}
}

<root>
	<div>@CurrentProp?.Health / @CurrentProp?.MaxHealth</div>
</root>

@code {
	public SceneTraceResult tr => Scene.Trace.Ray(Scene.Camera.ScreenNormalToRay(0.5f), 500)
	.WithoutTags(FW.Tags.Player, FW.Tags.Ragdoll)
	.Run();

	public FortwarsProp CurrentProp => tr.GameObject?.Components.Get<FortwarsProp>();

	public bool ShowPanel { get; set; }

	public override void Tick()
	{
		base.Tick();

		if (!Scene.Camera.IsValid())
		{
			ShowPanel = false;
			return;
		}

		var hitObject = tr.GameObject;
		ShowPanel = tr.Hit && hitObject.IsValid() && hitObject.Components.TryGet<FortwarsProp>(out var fortwarsProp,
		FindMode.EverythingInSelfAndParent) && fortwarsProp.IsBuilding;

		if (ShowPanel)
		{
			// Start calculating panel position
			var screenPosition = Scene.Camera.PointToScreenPixels(tr.GameObject.WorldPosition, out _);

			// Turn screen position into a panel position
			var panelPosition = screenPosition * ScaleFromScreen;

			// Center the panel

			// Floor it / make it use integers
			var ipx = (int)panelPosition.x;
			var ipy = (int)panelPosition.y;

			// Offset it by half the panel size
			ipx -= 50;

			// Set position
			Style.Left = Length.Pixels(ipx);
			Style.Top = Length.Pixels(ipy);

			StateHasChanged();
		}
	}

	protected override int BuildHash()
	{
		var player = FWPlayerController.Local;
		return System.HashCode.Combine(player?.Inventory?.CurrentWeaponData?.Name, ShowPanel);
	}
}
