@using Sandbox;
@using Sandbox.UI;
@inherits Panel

@{
	var player = FWPlayerController.Local;

	var gs = GameSystem.Instance;

	if (!player.IsValid() || !ShowPanel || !CurrentProp.IsValid() || !gs.IsValid() || (!gs?.CurrentGameModeComponent?.CurrentRound.IsValid() ?? false))
		return;

	if ( !CurrentProp.IsBuilding )
		return;
}

<root>
	<div class="bar">
		<div class="inner" style="width: @(CurrentProp?.Health / CurrentProp?.MaxHealth * 100)%;"></div>
		<div class="health">@CurrentProp?.Health / @CurrentProp?.MaxHealth</div>
	</div>

	<div style="width: 220px; align-items: center; justify-content: center;">Built by @CurrentProp.Builder</div>
</root>

@code {
	public SceneTraceResult tr => Scene.Trace.Ray(Scene.Camera.ScreenNormalToRay(0.5f), 500)
	.WithoutTags(FW.Tags.Player, FW.Tags.Ragdoll)
	.Run();

	[Change( nameof( OnPropChange ) )] public FortwarsProp CurrentProp { get; set; }

	public bool ShowPanel { get; set; }

	public override void Tick()
	{
		base.Tick();

		if (!Scene.Camera.IsValid())
		{
			ShowPanel = false;
			return;
		}

		var hitObject = tr.GameObject;
		ShowPanel = tr.Hit && hitObject.IsValid() && hitObject.Components.TryGet<FortwarsProp>(out var fortwarsProp,
		FindMode.EverythingInSelfAndParent) && fortwarsProp.IsBuilding;

		CurrentProp = hitObject.IsValid() ? hitObject.Components.Get<FortwarsProp>() : null;

		if (ShowPanel)
		{
			// Start calculating panel position
			var screenPosition = Scene.Camera.PointToScreenPixels(tr.GameObject.WorldPosition, out _);

			// Turn screen position into a panel position
			var panelPosition = screenPosition * ScaleFromScreen;

			// Floor it / make it use integers
			var ipx = (int)panelPosition.x;
			var ipy = (int)panelPosition.y;

			// Offset it by half the panel size
			ipx -= 110;

			// Set position
			Style.Left = Length.Pixels(ipx);
			Style.Top = Length.Pixels(ipy);

			StateHasChanged();
		}
	}

	public void OnPropChange( FortwarsProp oldProp, FortwarsProp newProp )
	{
		if ( oldProp.IsValid() && oldProp.Components.TryGet<HighlightOutline>( out var outline ) && oldProp.IsBuilding )
		{
			oldProp.IsHovered = false;

			RemoveHighlightOutline( oldProp );
		}

		if ( newProp.IsValid() && newProp.IsBuilding )
		{
			newProp.Components.GetOrCreate<HighlightOutline>();
		}
	}

	[Rpc.Broadcast]
	public static void RemoveHighlightOutline( FortwarsProp prop )
	{
		if ( prop.IsValid() && prop.Components.TryGet<HighlightOutline>( out var outline ) )
		{
			outline.Destroy();
		}
	}

	[Rpc.Broadcast]
	public static void RemoveHighlightOutline( HighlightOutline highlightOutline )
	{
		if ( highlightOutline.IsValid() )
		{
			highlightOutline.Destroy();
		}
	}

	protected override int BuildHash()
	{
		var player = FWPlayerController.Local;
		return System.HashCode.Combine(player?.Inventory?.CurrentWeaponData?.Name, ShowPanel);
	}
}
